Nous allons procéder à la structuration de notre projet en sous parties

But du projet :
- Extraire automatiquement les titres et prix des livres depuis les fichiers HTML
- Structurer les données dans un fichier CSV
- Analyser les prix :
- Déterminer les livres les moins chers
- Afficher les prix moyens par livre
- Détecter un concurrent systématiquement plus cher ou moins cher
- Générer un rapport écrit (.txt ou terminal) avec des recommandations marketing




Première partie : 
- Extraire automatiquement les titres et prix des livres depuis les fichiers HTML

Nous sommes donc dans la partie 'E' du ETL (Extract, Transform, Load)


Pseudo-code : 
Fonction web_site_list()
Variable
    web_site_list <- Liste de Dictionnaire
    booky <- Dictionnaire
    lireplus <- Dictionnaire
    pagezen <- Dictionnaire
Début
    booky <- {
        nom: "booky",
        adresse: "booky.html", 
        balise_produit: "div",
        classe_produit: "produit",  
        balise_titre: "h2", 
        classe_titre: "titre",
        balise_prix: "p",
        classe_prix: "prix"
    }
    lireplus <- {
        nom: "lireplus",
        adresse: "lireplus.html",
        balise_produit: "article",
        classe_produit: "livre",  
        balise_titre: "h3", 
        classe_titre: "",
        balise_prix: "span", //Attention peut être "div span"
        classe_prix: "prix"
    }
    pagezen <- {
        nom: "pagezen",
        adresse: "pagezen.html",
        balise_produit: "li",
        classe_produit: "livre", 
        balise_titre: "div", 
        classe_titre: "titre-livre",
        balise_prix: "p", //Attention peut être "div p"
        classe_prix: "prix"
    }

    web_site_list <- booky, lireplus, pagezen
Retourner web_site_list
Fin

Fonction parse_data(adresse_web_site)
Variable
page_soup <- bs4.BeautifulSOup
Début
    Avec ouvrir (adresse_web_site, lecture, utf-8) comme fichier
    page_soup = BeautifulSoup(fichier, "html.parser")
Retourner page_soup
Fin


Fonction Extract(web_site_list)
Variable
    liste_des_produits <- liste
    concurrents <- Dictionnaire
Début
    Pour site dans web_site_list:
        page_soup <- parse_data(site[adresse])
        liste_des_produits <- Extract_product_list(page_soup)
        informations_produits <- Extract_data(liste_des_produits, site)
        concurrents[site[nom]] <- Dictionnaire
        concurrents[site[nom]] <- informations_produits
        
Retourner concurrents
Fin


Fonction Extract_product_list(web_site_dictionnaire, page_soup)
Variable
    liste_produits <- Liste
Début
    liste_produits <- page_soup.find_all(web_site_dictionnaire[balise_produit], class_=web_site_dictionnaire[classe_produit]).string    
Retourner liste_produits
Fin


Fonction Extract_data(liste_des_produits, web_site_dictionnaire)
Variable
    titre <- CHAINE DE CARACTERES
    prix <- CHAINE DE CARACTERES
    informations_produits <- Dictionnaire
Début
    Pour produit dans liste_des_produits: 
        titre <- extract_title(produit, web_site_dictionnaire) // On extrait le titre
        prix <- extract_price(produit, web_site_dictionnaire)  // On extrait son prix
        informations_produits[titre] <- {}
         informations_produits[titre]["prix :"] <- prix
    Fin Pour
Retourner informations_produits
Fin


Fonction extract_title(produit, web_site_dictionnaire)
Variable
titre <- CHAINE DE CARACTERES
Début
    Si PAS web_site_dictionnaire == ""
        titre <- web_site_dictionnaire.find(web_site_dictionnaire[balise_titre], class_=web_site_dictionnaire[classe_titre]).get_text()
    Sinon
        titre <- web_site_dictionnaire.find(web_site_dictionnaire[balise_titre]).get_text()

Retourner titre
Fin


Fonction extract_price(produit, web_site_dictionnaire)
Variable
prix <- CHAINE DE CARACTERES
Début
    prix <- web_site_dictionnaire.find(web_site_dictionnaire[balise_prix], class_=web_site_dictionnaire[classe_prix]).get_text()
Retourner prix
Fin



// Ici le code du programme :
Variable
liste_concurrents <- Liste de Dictionnaires
liste_web <- web_site_list()
liste_concurrents <- Extract(liste_web)
